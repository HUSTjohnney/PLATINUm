clock plan_clock, R1_clock, R2_clock;
const int H = 200;

chan pm1_meets_pm2, pm2_meets_pm3,
	gv1_meets_gv2;

process pm1() {
 clock pm1_clock;
state
	Before {plan_clock <= 0},
	During {plan_clock <= 20 and pm1_clock <= 20 },
	After;
init Before;
trans
	Before -> During { guard plan_clock >= 0; assign pm1_clock :=0 ; },
	During  -u-> After { guard plan_clock >= 10 and pm1_clock >= 10; 
		sync pm1_meets_pm2! ; };
}

process pm2() {
 clock pm2_clock;
state
	Before {plan_clock <= 20},
	During {plan_clock <= 50 and pm2_clock <= 40 },
	After;
init Before;
trans
	Before -> During { guard plan_clock >= 10
			and  R1_clock  >= H + 0; sync pm1_meets_pm2? ; assign pm2_clock :=0 ; },
	During  -u-> After { guard plan_clock >= 40 and pm2_clock >= 20; 
		sync pm2_meets_pm3! ;
		assign  R2_clock  := H ; };
}

process pm3() {
 clock pm3_clock;
state
	Before {plan_clock <= 50},
	During {plan_clock <= 100 and pm3_clock <= 100 },
	After;
init Before;
trans
	Before -> During { guard plan_clock >= 40; sync pm2_meets_pm3? ; assign pm3_clock :=0 ; },
	During  -> After { guard plan_clock >= 100 and pm3_clock >= 1;  };
}


process gv1() {
 clock gv1_clock;
state
	Before {plan_clock <= 0},
	During {plan_clock <= 40 and gv1_clock <= 40 },
	After;
init Before;
trans
	Before -> During { guard plan_clock >= 0; assign gv1_clock :=0 ; },
	During  -u-> After { guard plan_clock >= 10 and gv1_clock >= 10; 
		sync gv1_meets_gv2! ; };
}

process gv2() {
 clock gv2_clock;
state
	Before {plan_clock <= 40},
	During {plan_clock <= 100 and gv2_clock <= 100 },
	After;
init Before;
trans
	Before -> During { guard plan_clock >= 10; sync gv1_meets_gv2? ; assign gv2_clock :=0,
			 R1_clock  := H  ; },
	During  -u-> After { guard plan_clock >= 100 and gv2_clock >= 1
			and  R2_clock  >= H + 0;  };
}


system pm1, pm2, pm3, gv1, gv2;
