/*
Primitive Relations in the input plan:
R1: window 7 start_before_start[0,100] pointingmode 5
R2: pointingmode 5 end_before_end[0,100] window 7
R3: pointingmode 0 end_before_start[0,100] pointingmode 2
R4: pointingmode 2 end_before_start[0,100] pointingmode 5


Warning: the end time of the last token of the variable pointingmode should be (100,100).
Adding an unallcated temporal slot at the end


Warning: the end time of the last token of the variable window should be (100,100).
Adding an unallcated temporal slot at the end

*/

clock plan_clock, R1_clock, R2_clock, R3_clock, R4_clock;
const int H = 200;

process pointingmode ()
{
clock pointingmode_clock;
state 
	start,
	pointingmode0 { plan_clock <= 29 and pointingmode_clock <= 29 },
	pointingmode1 { plan_clock <= 32 and pointingmode_clock <= 3 },
	pointingmode2 { plan_clock <= 35 and pointingmode_clock <= 3 },
	pointingmode3 { plan_clock <= 38 and pointingmode_clock <= 3 },
	pointingmode4 { plan_clock <= 39 and pointingmode_clock <= 29 },
	pointingmode5 { plan_clock <= 40 and pointingmode_clock <= 8 },
	pointingmode6 { plan_clock <= 100 },
	finish;
init start;
trans
	start -> pointingmode0 { guard plan_clock==0; },
	pointingmode0 -> pointingmode1  { guard plan_clock >= 1 and pointingmode_clock >= 1;
			assign pointingmode_clock := 0,
			 R3_clock  := H ;  },
	pointingmode1 -> pointingmode2  { guard plan_clock >= 4 and pointingmode_clock >= 3
			and  R3_clock  >= H + 0 and  R3_clock  <= H + 100;
		    assign pointingmode_clock := 0; },
	pointingmode2 -> pointingmode3  { guard plan_clock >= 7 and pointingmode_clock >= 3;
			assign pointingmode_clock := 0,
			 R4_clock  := H ;  },
	pointingmode3 -> pointingmode4  { guard plan_clock >= 10 and pointingmode_clock >= 3;
			assign pointingmode_clock := 0; },
	pointingmode4 -> pointingmode5  { guard plan_clock >= 11 and pointingmode_clock >= 1
			and  R4_clock  >= H + 0 and  R4_clock  <= H + 100
			and  R1_clock  >= H + 0 and  R1_clock  <= H + 100;
		    assign pointingmode_clock := 0; },
	pointingmode5 -u-> pointingmode6  { guard plan_clock >= 12 and pointingmode_clock >= 1;
			assign pointingmode_clock := 0,
			 R2_clock  := H ;  },
	pointingmode6 -> finish { guard plan_clock >= 100 and pointingmode_clock >= 0;   }
	;
}

process window ()
{
clock window_clock;
state 
	start,
	window6 { plan_clock <= 10 and window_clock <= 10 },
	window7 { plan_clock <= 40 and window_clock <= 30 },
	window8 { plan_clock <= 50 and window_clock <= 10 },
	window9 { plan_clock <= 100 },
	finish;
init start;
trans
	start -> window6 { guard plan_clock==0; },
	window6 -u-> window7  { guard plan_clock >= 10 and window_clock >= 10;
			assign window_clock := 0,
			 R1_clock  := H ;  },
	window7 -u-> window8  { guard plan_clock >= 40 and window_clock >= 30
			and  R2_clock  >= H + 0 and  R2_clock  <= H + 100;
		    assign window_clock := 0; },
	window8 -u-> window9  { guard plan_clock >= 50 and window_clock >= 10;
			assign window_clock := 0; },
	window9 -> finish { guard plan_clock >= 100 and window_clock >= 0;   }
	;
}

system window, pointingmode;
