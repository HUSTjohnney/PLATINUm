/*
Primitive Relations in the input plan:
R1: rsa 15 start_before_start[0,200] instrument 13
R2: instrument 13 end_before_end[0,200] rsa 15
R3: pointingmode 2 start_before_start[0,200] rsa 15
R4: rsa 15 end_before_end[0,200] pointingmode 2
R5: groundstation 6 start_before_start[0,200] rsa 17
R6: rsa 17 end_before_end[0,200] groundstation 6
R7: pointingmode 4 start_before_start[0,200] rsa 17
R8: rsa 17 end_before_end[0,200] pointingmode 4
R9: orbit 8 start_before_start[0,200] pointingmode 2
R10: pointingmode 2 end_before_end[0,200] orbit 8
R11: orbit 9 start_before_start[0,200] pointingmode 4
R12: pointingmode 4 end_before_end[0,200] orbit 9
R13: rsa 14 end_before_start[0,200] rsa 15
R14: pointingmode 0 end_before_start[0,200] pointingmode 2
R15: instrument 11 end_before_start[0,200] instrument 13
R16: rsa 15 end_before_start[0,200] rsa 17

***Removing the trivial relation rsa 14 end_before_start[0,200] rsa 15

Primitive Relations left:
R1: rsa 15 start_before_start[0,200] instrument 13
R2: instrument 13 end_before_end[0,200] rsa 15
R3: pointingmode 2 start_before_start[0,200] rsa 15
R4: rsa 15 end_before_end[0,200] pointingmode 2
R5: groundstation 6 start_before_start[0,200] rsa 17
R6: rsa 17 end_before_end[0,200] groundstation 6
R7: pointingmode 4 start_before_start[0,200] rsa 17
R8: rsa 17 end_before_end[0,200] pointingmode 4
R9: orbit 8 start_before_start[0,200] pointingmode 2
R10: pointingmode 2 end_before_end[0,200] orbit 8
R11: orbit 9 start_before_start[0,200] pointingmode 4
R12: pointingmode 4 end_before_end[0,200] orbit 9
R14: pointingmode 0 end_before_start[0,200] pointingmode 2
R15: instrument 11 end_before_start[0,200] instrument 13
R16: rsa 15 end_before_start[0,200] rsa 17

Warning: the end time of the last token of the variable pointingmode should be (200,200).
Adding an unallcated temporal slot at the end


Warning: the end time of the last token of the variable instrument should be (200,200).
Adding an unallcated temporal slot at the end


Warning: the end time of the last token of the variable rsa should be (200,200).
Adding an unallcated temporal slot at the end

*/

clock plan_clock, R1_clock, R2_clock, R3_clock, R4_clock, R5_clock, R6_clock, R7_clock, R8_clock, R9_clock, R10_clock, R11_clock, R12_clock, R14_clock, R15_clock, R16_clock;
const int H = 400;

process pointingmode ()
{
clock pointingmode_clock;
state 
	start,
	pointingmode0 { plan_clock <= 52 and pointingmode_clock <= 52 },
	pointingmode1 { plan_clock <= 57 and pointingmode_clock <= 5 },
	pointingmode2 { plan_clock <= 60 and pointingmode_clock <= 54 },
	pointingmode3 { plan_clock <= 65 and pointingmode_clock <= 5 },
	pointingmode4 { plan_clock <= 140 and pointingmode_clock <= 80 },
	pointingmode5 { plan_clock <= 200 },
	finish;
init start;
trans
	start -> pointingmode0 { guard plan_clock==0; },
	pointingmode0 -> pointingmode1  { guard plan_clock >= 1 and pointingmode_clock >= 1;
			assign pointingmode_clock := 0,
			 R14_clock  := H ;  },
	pointingmode1 -> pointingmode2  { guard plan_clock >= 6 and pointingmode_clock >= 5
			and  R14_clock  >= H + 0 and  R14_clock  <= H + 200
			and  R9_clock  >= H + 0 and  R9_clock  <= H + 200;
		    assign pointingmode_clock := 0,
			 R3_clock  := H ;  },
	pointingmode2 -> pointingmode3  { guard plan_clock >= 55 and pointingmode_clock >= 3
			and  R4_clock  >= H + 0 and  R4_clock  <= H + 200;
		    assign pointingmode_clock := 0,
			 R10_clock  := H ;  },
	pointingmode3 -> pointingmode4  { guard plan_clock >= 60 and pointingmode_clock >= 5
			and  R11_clock  >= H + 0 and  R11_clock  <= H + 200;
		    assign pointingmode_clock := 0,
			 R7_clock  := H ;  },
	pointingmode4 -> pointingmode5  { guard plan_clock >= 65 and pointingmode_clock >= 5
			and  R8_clock  >= H + 0 and  R8_clock  <= H + 200;
		    assign pointingmode_clock := 0,
			 R12_clock  := H ;  },
	pointingmode5 -> finish { guard plan_clock >= 200 and pointingmode_clock >= 0;   }
	;
}

process groundstation ()
{
clock groundstation_clock;
state 
	start,
	groundstation5 { plan_clock <= 60 and groundstation_clock <= 60 },
	groundstation6 { plan_clock <= 140 and groundstation_clock <= 80 },
	groundstation7 { plan_clock <= 200 and groundstation_clock <= 60 },
	finish;
init start;
trans
	start -> groundstation5 { guard plan_clock==0; },
	groundstation5 -> groundstation6  { guard plan_clock >= 60 and groundstation_clock >= 60;
			assign groundstation_clock := 0,
			 R5_clock  := H ;  },
	groundstation6 -> groundstation7  { guard plan_clock >= 140 and groundstation_clock >= 80
			and  R6_clock  >= H + 0 and  R6_clock  <= H + 200;
		    assign groundstation_clock := 0; },
	groundstation7 -> finish { guard plan_clock >= 200 and groundstation_clock >= 60;   }
	;
}

process orbit ()
{
clock orbit_clock;
state 
	start,
	orbit8 { plan_clock <= 60 and orbit_clock <= 60 },
	orbit9 { plan_clock <= 140 and orbit_clock <= 80 },
	orbit10 { plan_clock <= 200 and orbit_clock <= 60 },
	finish;
init start;
trans
	start -> orbit8 { guard plan_clock==0; 
			assign  R9_clock  := H ; },
	orbit8 -> orbit9  { guard plan_clock >= 60 and orbit_clock >= 60
			and  R10_clock  >= H + 0 and  R10_clock  <= H + 200;
		    assign orbit_clock := 0,
			 R11_clock  := H ;  },
	orbit9 -> orbit10  { guard plan_clock >= 140 and orbit_clock >= 80
			and  R12_clock  >= H + 0 and  R12_clock  <= H + 200;
		    assign orbit_clock := 0; },
	orbit10 -> finish { guard plan_clock >= 200 and orbit_clock >= 60;   }
	;
}

process instrument ()
{
clock instrument_clock;
state 
	start,
	instrument11 { plan_clock <= 54 and instrument_clock <= 54 },
	instrument12 { plan_clock <= 57 and instrument_clock <= 3 },
	instrument13 { plan_clock <= 60 and instrument_clock <= 8 },
	instrument14 { plan_clock <= 200 },
	finish;
init start;
trans
	start -> instrument11 { guard plan_clock==0; },
	instrument11 -> instrument12  { guard plan_clock >= 3 and instrument_clock >= 3;
			assign instrument_clock := 0,
			 R15_clock  := H ;  },
	instrument12 -> instrument13  { guard plan_clock >= 6 and instrument_clock >= 3
			and  R15_clock  >= H + 0 and  R15_clock  <= H + 200
			and  R1_clock  >= H + 0 and  R1_clock  <= H + 200;
		    assign instrument_clock := 0; },
	instrument13 -> instrument14  { guard plan_clock >= 9 and instrument_clock >= 3;
			assign instrument_clock := 0,
			 R2_clock  := H ;  },
	instrument14 -> finish { guard plan_clock >= 200 and instrument_clock >= 0;   }
	;
}

process rsa ()
{
clock rsa_clock;
state 
	start,
	rsa14 { plan_clock <= 57 and rsa_clock <= 57 },
	rsa15 { plan_clock <= 60 and rsa_clock <= 54 },
	rsa16 { plan_clock <= 135 and rsa_clock <= 126 },
	rsa17 { plan_clock <= 140 and rsa_clock <= 15 },
	rsa18 { plan_clock <= 200 },
	finish;
init start;
trans
	start -> rsa14 { guard plan_clock==0; },
	rsa14 -> rsa15  { guard plan_clock >= 6 and rsa_clock >= 6
			and  R3_clock  >= H + 0 and  R3_clock  <= H + 200;
		    assign rsa_clock := 0,
			 R1_clock  := H ;  },
	rsa15 -> rsa16  { guard plan_clock >= 9 and rsa_clock >= 3
			and  R2_clock  >= H + 0 and  R2_clock  <= H + 200;
		    assign rsa_clock := 0,
			 R16_clock  := H ,
			 R4_clock  := H ;  },
	rsa16 -> rsa17  { guard plan_clock >= 60 and rsa_clock >= 5
			and  R16_clock  >= H + 0 and  R16_clock  <= H + 200
			and  R7_clock  >= H + 0 and  R7_clock  <= H + 200
			and  R5_clock  >= H + 0 and  R5_clock  <= H + 200;
		    assign rsa_clock := 0; },
	rsa17 -u-> rsa18  { guard plan_clock >= 65 and rsa_clock >= 5;
			assign rsa_clock := 0,
			 R8_clock  := H ,
			 R6_clock  := H ;  },
	rsa18 -> finish { guard plan_clock >= 200 and rsa_clock >= 0;   }
	;
}

system rsa, instrument, orbit, groundstation, pointingmode;
